// prisma/schema.prisma
// ---------- Base ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum Role {
  CUSTOMER
  SELLER
  PROVIDER
}

enum MediaType {
  PHOTO
  VIDEO
}

enum ReactionType {
  LIKE       // üëç Me gusta
  LOVE       // ‚ù§ Me encanta
  WANT       // ü§© Lo quiero
  RECOMMEND  // üôå Recomendado
  CLAP       // üëè Aplausos
  CONFUSED   // ü•¥ No me convence
}

enum ChatSender {
  me
  seller
}

/* === Badges === */
enum BadgeCode {
  real_photo
  real_name
  kindness
  on_time
  top_recommended
}

enum BadgeIcon {
  user_check   // Feather: user-check
  id_card      // MaterialCommunityIcons: id-card
  smile        // Feather: smile
  clock        // Feather: clock
  award        // Feather: award
}

// ---------- Modelos ----------
model User {
  id                  Int      @id @default(autoincrement())
  email               String   @unique
  password            String
  role                Role     @default(CUSTOMER)
  name                String?
  onboardingCompleted Boolean  @default(false)

  // Preferencias / Welcome
  lang             String   @default("es")
  tcAccepted       Boolean  @default(false)
  tcVersion        String?
  legalAcceptedAt  DateTime?

  // Verificaci√≥n por correo
  emailVerified    Boolean   @default(false)
  emailVerifiedAt  DateTime?

  // Verificaci√≥n de cuenta (badge) SOLO tras pago
  paidVerified     Boolean   @default(false)
  paidVerifiedAt   DateTime?

  // Marca de tiempo
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relaciones
  business            Business?
  serviceProfile      ServiceProfile?
  products            Product[]
  media               Media[]
  reactions           Reaction[]
  reviewsAuthored     Review[]                 @relation("reviews_authored")
  reviewsReceived     Review[]                 @relation("reviews_received")
  followers           Follow[]                 @relation("followedBy")
  following           Follow[]                 @relation("follows")
  refreshTokens       RefreshToken[]
  emailTokens         EmailVerificationToken[]
  favoriteProducts    FavoriteProduct[]
  passwordResetTokens PasswordResetToken[]

  // Badges
  sellerBadges      SellerBadge[]

  @@index([email])
}

model Business {
  id    Int     @id @default(autoincrement())
  name  String
  phone String?
  city  String?

  ownerId Int  @unique
  owner   User @relation(fields: [ownerId], references: [id])

  // M√©tricas/flags para reglas de insignias
  hasRealPhoto       Boolean?  @default(false)
  realNameVerified   Boolean?  @default(false)
  ratingAvg          Float?
  responseRate       Float?    // 0..100
  responseTimeMs     Int?      // milisegundos
  onTimeRate         Float?    // 0..100
  categoryPercentile Float?    // 0 (mejor) .. 100

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceProfile {
  id    Int     @id @default(autoincrement())
  name  String
  phone String?
  city  String?

  ownerId Int  @unique
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String?
  sellerId    Int
  seller      User     @relation(fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reactions   Reaction[]
  favoredBy   FavoriteProduct[]

  @@index([sellerId])
  @@index([createdAt])
}

model Media {
  id        Int       @id @default(autoincrement())
  type      MediaType
  url       String
  ownerId   Int
  owner     User      @relation(fields: [ownerId], references: [id])
  caption   String?
  createdAt DateTime  @default(now())

  reactions Reaction[]

  @@index([ownerId])
  @@index([createdAt])
}

model Reaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  mediaId   Int?
  media     Media?       @relation(fields: [mediaId], references: [id])
  productId Int?
  product   Product?     @relation(fields: [productId], references: [id])
  createdAt DateTime     @default(now())

  @@index([userId])
  @@index([mediaId])
  @@index([productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  authorId  Int
  author    User     @relation("reviews_authored", fields: [authorId], references: [id])
  sellerId  Int
  seller    User     @relation("reviews_received", fields: [sellerId], references: [id])
  createdAt DateTime @default(now())

  @@index([authorId])
  @@index([sellerId])
}

model Follow {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("follows", fields: [followerId], references: [id])
  following User @relation("followedBy", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId])
}

model FavoriteProduct {
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@index([productId])
}

model RefreshToken {
  id            Int       @id @default(autoincrement())
  userId        Int
  jti           String    @unique
  revokedAt     DateTime?
  replacedByJti String?
  createdAt     DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model ChatMessage {
  id        String     @id @default(cuid())
  sellerId  Int
  userId    String?
  from      ChatSender
  text      String
  createdAt DateTime   @default(now())

  @@index([sellerId, createdAt])
}

/* === Badges === */
model Badge {
  id          Int        @id @default(autoincrement())
  code        BadgeCode  @unique
  label       String
  description String
  icon        BadgeIcon

  sellers     SellerBadge[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SellerBadge {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  badgeId   Int
  earnedAt  DateTime @default(now())

  owner   User  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  badge   Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([ownerId, badgeId])
  @@index([ownerId])
  @@index([badgeId])
}